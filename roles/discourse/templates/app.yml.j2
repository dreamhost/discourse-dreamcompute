#jinja2: lstrip_blocks: "True"
## this is the all-in-one, standalone Discourse Docker container template
##
## After making changes to this file, you MUST rebuild
## /var/discourse/launcher rebuild app
##
## BE *VERY* CAREFUL WHEN EDITING!
## YAML FILES ARE SUPER SUPER SENSITIVE TO MISTAKES IN WHITESPACE OR ALIGNMENT!
## visit http://www.yamllint.com/ to validate this file as needed


templates:
  - "templates/postgres.template.yml"
  - "templates/redis.template.yml"
  - "templates/web.template.yml"
  - "templates/web.ratelimited.template.yml"
## Uncomment these two lines if you wish to add Lets Encrypt (https)
  #- "templates/web.ssl.template.yml"
  #- "templates/web.letsencrypt.ssl.template.yml"

## which TCP/IP ports should this container expose?
## If you want Discourse to share a port with another webserver like Apache or nginx,
## see https://meta.discourse.org/t/17247 for details
expose:
  - "80:80"   # http
  - "443:443" # https

params:
  db_default_text_search_config: "pg_catalog.english"

  ## Set db_shared_buffers to a max of 25% of the total memory.
  ## will be set automatically by bootstrap based on detected RAM, or you can override
  db_shared_buffers: "1024MB"

  ## can improve sorting performance, but adds memory usage per-connection
  #db_work_mem: "40MB"

  ## Which Git revision should this container use? (default: tests-passed)
  #version: tests-passed

env:
  LANG: en_US.UTF-8
  # DISCOURSE_DEFAULT_LOCALE: en

  ## How many concurrent web requests are supported? Depends on memory and CPU cores.
  ## will be set automatically by bootstrap based on detected CPUs, or you can override
  UNICORN_WORKERS: 4

  ## TODO: The domain name this Discourse instance will respond to
  DISCOURSE_HOSTNAME: {{ discourse.hostname }}

  ## Uncomment if you want the container to be started with the same
  ## hostname (-h option) as specified above (default "$hostname-$config")
  #DOCKER_USE_HOSTNAME: true

  ## TODO: List of comma delimited emails that will be made admin and developer
  ## on initial signup example 'user1@example.com,user2@example.com'
  DISCOURSE_DEVELOPER_EMAILS: "{{ discourse.admin_email }}"

  ## TODO: The SMTP mail server used to validate new accounts and send notifications
  DISCOURSE_SMTP_ADDRESS: "{{ discourse.smtp_server }}"
  DISCOURSE_SMTP_PORT: "{{ discourse.smtp_port }}"
  DISCOURSE_SMTP_USER_NAME: "{{ discourse.smtp_user }}"
  DISCOURSE_SMTP_PASSWORD: "{{ discourse.smtp_password }}"
  {% if discourse.smtp_authentication is defined %}
  {% if (discourse.smtp_authentication != "") %}
  DISCOURSE_SMTP_AUTHENTICATION: "{{ discourse.smtp_authentication }}"
  {% endif %}
  {% endif %}

  {% if discourse.lets_encrypt_email is defined %}
  {% if (discourse.lets_encrypt_email != "") %}
  LETSENCRYPT_ACCOUNT_EMAIL: "{{ discourse.lets_encrypt_email }}"
  {% endif %}
  {% endif %}

  ## The CDN address for this Discourse instance (configured to pull)
  ## see https://meta.discourse.org/t/14857 for details
  #DISCOURSE_CDN_URL: //discourse-cdn.example.com

## The Docker container is stateless; all data is stored in /shared
volumes:
  - volume:
      host: /var/discourse/discourse_docker/shared/standalone
      guest: /shared
  - volume:
      host: /var/discourse/discourse_docker/shared/standalone/log/var-log
      guest: /var/log

## Plugins go here
## see https://meta.discourse.org/t/19157 for details
{% if discourse.plugins is defined %}
{% if discourse.plugins|length != 0%}
hooks:
  after_code:
    - exec:
        cd: $home/plugins
        cmd:
        {% for item in discourse.plugins %}
          - git clone {{ item }}
        {% endfor %}
{% endif %}
{% endif %}

## Any custom commands to run after building
run:
  - exec: echo "Beginning of custom commands"
  - exec: echo -e "calebboylan@gmail.com\n\n\n" | rake admin:create
  ## If you want to set the 'From' email address for your first registration, uncomment and change:
  ## After getting the first signup email, re-comment the line. It only needs to run once.
  #- exec: rails r "SiteSetting.notification_email='info@unconfigured.discourse.org'"
  - exec: echo "End of custom commands"
